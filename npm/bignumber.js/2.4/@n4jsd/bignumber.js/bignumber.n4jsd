@Final
@EcmaScript
export external public class BigNumberConfig {
    public DECIMAL_PLACES?: number;
    public ROUNDING_MODE?: number;
    public ERRORS?: boolean;
    public CRYPTO?: boolean;
    public FORMAT?: Object;
}

/**
 * Class definition for BigNumber (http://mikemcl.github.io/bignumber.js).
 */
@Final
@EcmaScript
export default external public class BigNumber {
    public static another(config: ~BigNumberConfig): constructor{BigNumber};
    
    /**
     * The library's enumerated rounding modes are stored as properties of the constructor.
     * (They are not referenced internally by the library itself.)
     * Rounding modes 0 to 6 (inclusive) are the same as those of Java's BigDecimal class.
     */

    /**
     * Value 0. Rounds away from zero.
     */
    public const ROUND_UP: number;

    /**
     * Value 1. Rounds towards zero.
     */
    public const ROUND_DOWN: number;

    /**
     * Value 2. Rounds towards Infinity.
     */
    public const ROUND_CEIL: number;

    /**
     * Value 3. Rounds towards -Infinity.
     */
    public const ROUND_FLOOR: number;

    /**
     * Value 4.
     * Rounds towards nearest neighbour.
     * If equidistant, rounds away from zero
     */
    public const ROUND_HALF_UP: number;

    /**
     * Value 5.
     * Rounds towards nearest neighbour.
     * If equidistant, rounds towards zero
     */
    public const ROUND_HALF_DOWN: number;

    /**
     * Value 6.
     * Rounds towards nearest neighbour.
     * If equidistant, rounds towards even neighbour
     */
    public const ROUND_HALF_EVEN: number;

    /**
     * Value 7.
     * Rounds towards nearest neighbour.
     * If equidistant, rounds towards Infinity
     */
    public const ROUND_HALF_CEIL: number;

    /**
     * Value 8.
     * Rounds towards nearest neighbour.
     * If equidistant, rounds towards -Infinity
     */
    public const ROUND_HALF_FLOOR: number;


    /**
     * Constructor function.
     * @return a new instance of a BigNumber object.
     * If a base is specified, the value is rounded according to the current DECIMAL_PLACES and ROUNDING_MODE configuration.
     *
     * @param value Legitimate values include ±0, ±Infinity and NaN.
     * Values of type number with more than 15 significant digits are considered invalid (if ERRORS is true)
     * as calling toString or valueOf on such numbers may not result in the intended value. E.g.
     *      console.log( 823456789123456.3 );    // 823456789123456.2
     *
     * There is no limit to the number of digits of a value of type string (other than that of JavaScript's maximum array size).
     *
     * Decimal string values may be in exponential,
     * as well as normal (fixed-point) notation. Non-decimal values must be in normal notation.
     *
     * String values in hexadecimal literal form, e.g. '0xff', are valid,
     * as are string values with the octal and binary prefixs '0o' and '0b'.
     * String values in octal literal form without the prefix will be interpreted as decimals,
     * e.g. '011' is interpreted as 11, not 9.
     *
     * Values in any base may have fraction digits.
     * For bases from 10 to 36, lower and/or upper case letters can be used to represent values from 10 to 35.
     * For bases above 36, a-z represents values from 10 to 35, A-Z from 36 to 61,
     * and $ and _ represent 62 and 63 respectively (this can be changed by editing the ALPHABET variable near the top of the source file).
     *
     * @param base An integer from 2 to 64 inclusive. The base of value.
     * If base is omitted, or is null or undefined, base 10 is assumed.
     *
     * Examples :
     *      x = new BigNumber(9)                       // '9'
     *      y = new BigNumber(x)                       // '9'
     *
     *      new BigNumber('5032485723458348569331745.33434346346912144534543')
     *      new BigNumber('4.321e+4')                  // '43210'
     *      new BigNumber('-735.0918e-430')            // '-7.350918e-428'
     *      new BigNumber(Infinity)                    // 'Infinity'
     *      new BigNumber(NaN)                         // 'NaN'
     *      new BigNumber('.5')                        // '0.5'
     *      new BigNumber('+2')                        // '2'
     *      new BigNumber(-10110100.1, 2)              // '-180.5'
     *      new BigNumber(-0b10110100.1)               // '-180.5'
     *      new BigNumber('123412421.234324', 5)       // '607236.557696'
     *      new BigNumber('ff.8', 16)                  // '255.5'
     *      new BigNumber('0xff.8')                    // '255.5'
     */
    public constructor(value: union{number, string, ~BigNumber}, base: number = undefined);

    /**
     * Configures the 'global' settings for this particular BigNumber constructor.
     * Example :
              BigNumber.config({
                DECIMAL_PLACES: 40,
                ROUNDING_MODE: BigNumber.ROUND_HALF_CEIL,
                EXPONENTIAL_AT: [-10, 20],
                RANGE: [-500, 500],
                ERRORS: true,
                CRYPTO: true,
                MODULO_MODE: BigNumber.ROUND_FLOOR,
                POW_PRECISION: 80,
                FORMAT: {
                    groupSize: 3,
                    groupSeparator: ' ',
                    decimalSeparator: ','
                }
            });
     */
    public static config(config: ~BigNumberConfig): void;

    /**
     * @return a BigNumber whose value is the absolute value, i.e. the magnitude, of the value of this BigNumber.
     * The return value is always exact and unrounded.
     */
    public absoluteValue(): BigNumber;

    /**
     * @return a BigNumber whose value is the value of this BigNumber,
     * rounded to a whole number in the direction of positive Infinity.
     */
    public ceil(): BigNumber;

    /**
     * @return :
     *  1   If the value of this BigNumber is greater than the value of number
     *  -1  If the value of this BigNumber is less than the value of number
     *  0   If this BigNumber and number have the same value
     *  null    If the value of either this BigNumber or number is NaN
     */
    public comparedTo(number: union{number, string, ~BigNumber}, base: number = undefined): number;

    /**
     * @return the number of decimal places of the value of this BigNumber,
     * or null if the value of this BigNumber is ±Infinity or NaN.
     */
    public decimalPlaces(): number;

    /**
     * @return a BigNumber whose value is the value of this BigNumber times number.
     * The return value is always exact and unrounded.
     */
    public times(number: union{number, string, ~BigNumber}, base: number = undefined): BigNumber;

    /**
     * @return a BigNumber whose value is the value of this BigNumber divided by n,
     * rounded according to the current DECIMAL_PLACES and ROUNDING_MODE configuration.
     */
    public dividedBy(number: union{number, string, ~BigNumber}, base: number = undefined): BigNumber;

    /**
     * @return true if the value of this BigNumber equals the value of n, otherwise returns false.
     * As with JavaScript, NaN does not equal NaN.
     *
     * Note: This method uses the comparedTo method internally.
     */
    public equals(number: union{number, string, ~BigNumber}, base: number = undefined): boolean;

    /**
     * @return true if the value of this BigNumber is negative, otherwise returns false.
     */
    public isNegative(): boolean;

    /**
     * @return true if the value of this BigNumber is zero or minus zero, otherwise returns false.
     */
    public isZero(): boolean;

    /**
     * @return true if the value of this BigNumber is a whole number, otherwise returns false.
     */
    public isInteger(): boolean;

    /**
     * @return a BigNumber whose value is the value of this BigNumber negated, i.e. multiplied by -1.
     */
    public negated(): BigNumber;

    /**
     * @return a BigNumber whose value is the value of this BigNumber minus n.
     * The return value is always exact and unrounded.
     */
    public minus(number: union{number, string, ~BigNumber}, base: number = undefined): BigNumber;

    /**
     * @return a BigNumber whose value is the value of this BigNumber plus n.
     * The return value is always exact and unrounded.
     */
    public plus(number: union{number, string, ~BigNumber}, base: number = undefined): BigNumber;

    /**
     * @return a BigNumber whose value is the value of this BigNumber
     * rounded by rounding mode rm to a maximum of dp decimal places.
     * If decimalPlaces is omitted, or is null or undefined, the return value is the BigNumber rounded to a whole number.
     * If roundingMode is omitted, or is null or undefined, ROUNDING_MODE (set using the config method) is used.
     */
    public round(decimalPlaces: number, roundingMode: number = undefined): BigNumber;

    /**
     * @return a string representing the value of this BigNumber in normal (fixed-point) notation
     * rounded to dp decimal places using rounding mode rm,
     * and formatted according to the properties of the FORMAT object.
     */
    public toFormat(decimalPlaces: number, roundingMode: number = undefined): string;

    /**
     * @return a string representing the value of this BigNumber in normal (fixed-point) notation,
     * rounded to "decimalPlaces" decimal places using rounding mode "roundingMode".
     *
     * If the value of this BigNumber in normal notation has fewer than "decimalPlaces" fraction digits,
     * the return value will be appended with zeros accordingly.
     *
     * Unlike Number.prototype.toFixed, which returns exponential notation
     * if a number is greater or equal to 1021, this method will always return normal notation.
     *
     * If "decimalPlaces" is omitted or is null or undefined, the return value will be unrounded and in normal notation.
     * This is also unlike Number.prototype.toFixed, which returns the value to zero decimal places.
     * It is useful when fixed-point notation is required and the current EXPONENTIAL_AT setting causes toString to return exponential notation.
     *
     * If "roundingMode" is omitted or is null or undefined, ROUNDING_MODE (set using the config method) is used.
     *
     * @param decimalPlaces: number: integer, 0 to 1e+9 inclusive
     * @param roundingMode: number: integer, 0 to 8 inclusive
     */
    public toFixed(decimalPlaces: number, roundingMode: number = undefined): string;

    /**
     * @return the value of this BigNumber as a JavaScript number primitive.
     * Type coercion with, for example, the unary plus operator will also work,
     * except that a BigNumber with the value minus zero will be converted to positive zero.
     */
    public toNumber(): number;

    /**
     * @return a string representing the value of this BigNumber in the specified base,
     * or base 10 if base is omitted or is null or undefined.
     *
     * For bases above 10, values from 10 to 35 are represented by a-z (as with Number.prototype.toString),
     * 36 to 61 by A-Z, and 62 and 63 by $ and _ respectively.
     * If a base is specified the value is rounded according to the current DECIMAL_PLACES and ROUNDING_MODE configuration.
     *
     * If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than the positive component of the current EXPONENTIAL_AT setting,
     * or a negative exponent equal to or less than the negative component of the setting,
     * then exponential notation is returned.
     *
     * If base is null or undefined it is ignored.
     */
    @Override
    public toString(base: number = undefined): string;
}

/* -*- mode: typescript;-*- */

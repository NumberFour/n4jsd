/**
 * Passed into page props.
 */
export external public class ~RoutingOptions {
    public shallow?: boolean;
}

export external public interface ~INextRouter {
    /**
     * String of the current route.
     */
    public get route(): string;
    /**
     * String of the current path excluding the query string.
     */
    public get pathname(): string;
    /**
     * Object with the parsed query string. Defaults to {}
     */
    public get query(): Object+;
    /**
     * performs a pushState call associated with the current component
     */
    public push(url, as: string=, options: RoutingOptions=): void;
    /**
     * performs a replaceState call associated with the current component
     */
    public replace(url: string, as: string=, options: RoutingOptions=): void;

    public async prefetch(url: string);

    /**
     * Fires when a route starts to change.
     */
    public routeChangeStart: {function(url: string): void};
    /**
     * Fires when a route changed completely.
     */
    public routeChangeComplete: {function(url: string): void};
    /**
     * Fires when there's an error when changing routes.
     */
    public routeChangeError: {function(err: ~Error with { cancelled: boolean; }, url: string): void};
    /**
     * Fires just before changing the browser's history
     */
    public beforeHistoryChange: {function(url: string): void};
    /**
     * Fires when switching pages and there's a new version of the app}.
     */
    public appUpdated: {function(nextRoute: string): void};
}

/**
 * https://github.com/zeit/next.js#imperatively
 */
export default external public const Router: INextRouter;

/* -*- mode: typescript;-*- */
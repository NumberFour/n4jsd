import * as React from "react";

@StringBased
export external public enum ReactMarkdownType {
    HtmlInline,//- Inline HTML
    HtmlBlock ,//- Block of HTML
    Text ,//- Text nodes (inside of paragraphs, list items etc)
    Paragraph,// - Paragraph nodes (<p>)
    Heading,// - Headers (<h1>, <h2> etc)
    Softbreak,// - Newlines
    Hardbreak,// - Hard line breaks (<br>)
    Link,// - Link nodes (<a>)
    Image,// - Image nodes (<img>)
    Emph,// - Emphasis nodes (<em>)
    Code,// - Inline code nodes (<code>)
    CodeBlock,// - Blocks of code (<code>)
    BlockQuote,// - Block quotes (<blockquote>)
    List,// - List nodes (<ol>, <ul>)
    Item,// - List item nodes (<li>)
    Strong,// - Strong/bold nodes (<strong>)
    ThematicBreak// - Horizontal rule nodes (<hr>)
}

export external public interface ~ReactMarkdownProps extends React.ComponentProps {
    /**
     * The Markdown source to parse (required)
     */
    public source: string;

    /**
     * Setting to true will escape HTML blocks, rendering plain text instead of inserting the 
     * blocks as raw HTML (default: false)
     */
    public escapeHTML?: boolean;

    /**
     *  Defines which types of nodes should be allowed (rendered). (default: all types).
     */
    public allowedTypes?: ReactMarkdownType[];

    /**
     * Defines which types of nodes should be disallowed (not rendered). (default: none).
     */
    public dissalowedTypes?: ReactMarkdownType[];

    /**
     * Setting to true will try to extract/unwrap the children of disallowed nodes. For instance, 
     * if disallowing Strong, the default behaviour is to simply skip the text within the strong 
     * altogether, while the behaviour some might want is to simply have the text returned without 
     * the strong wrapping it. (default: false)
     */
    public unwrapDisallowed?: boolean;

    /**
     * An object where the keys represent the node type and the value is a React component. The object 
     * is merged with the default renderers. The props passed to the component varies based on the type 
     * of node. See the type renderer options of commonmark-react-renderer 
     * (https://github.com/rexxars/commonmark-react-renderer#type-renderer-options) for more details.
     */
    public renderers?: Object;
    
    /**
     * Tag name for the container element, since Markdown can have many root-level elements, the 
     * component need to wrap them in something (default: div).
     */
    public containerTagName?: string;
   
    /**
     *  An object containing custom element props to put on the container element.
     */
    public containerProps?: Object;

    /**
     * Set to `null` to disable default behaviour.
     */
    public transformLinkUri?: Function;
}


/**
 * Render Markdown as React components
 * https://github.com/rexxars/react-markdown
 * http://rexxars.github.io/react-markdown/
 */
export default external public class ReactMarkdown extends React.Component<ReactMarkdownProps, undefined> {
    @Override
    public render(): React.Element<?>;
};

/* -*- mode: typescript;-*- */
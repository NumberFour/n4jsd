import * as React from "react";

@StringBased
export external public enum ReactMarkdownType {
    root,
    text,
    break,
    paragraph,
    emphasis,
    strong,
    thematicBreak,
    blockquote,
    delete,
    link,
    image,
    linkReference,
    imageReference,
    table,
    tableHead,
    tableBody,
    tableRow,
    tableCell,
    list,
    listItem,
    definition,
    heading,
    inlineCode,
    code,
    html,
    virtualHtml
}

export external public interface ~ReactMarkdownProps extends React.ComponentProps<any> {
    /**
     * The Markdown source to parse (required)
     */
    public source: string;
    
    /**
     * Class name of the container element. If none is passed, a container will not be rendered.
     */
    public className?: string;

    /**
     * Setting to true will escape HTML blocks, rendering plain text instead of inserting the 
     * blocks as raw HTML (default: false)
     */
    public escapeHtml?: boolean;

    /**
     * Setting to true will skip inlined and blocks of HTML (default: false).
     */
    public skipHtml?: boolean;

    /**
     * Setting to true will add data-sourcepos attributes to all elements, 
     * indicating where in the markdown source they were rendered from (default: false).
     */
    public sourcePos?: boolean;

    /**
     * Setting to true will pass a sourcePosition property to all renderers 
     * with structured source position information (default: false).
     */
    public rawSourcePos?: boolean;

    /**
     * Setting to true will pass index and parentChildCount props to all renderers (default: false).
     */
    public includeNodeIndex?: boolean;

    /**
     *  Defines which types of nodes should be allowed (rendered). (default: all types).
     */
    public allowedTypes?: ReactMarkdownType[];

    /**
     * Defines which types of nodes should be disallowed (not rendered). (default: none).
     */
    public dissalowedTypes?: ReactMarkdownType[];

    /**
     * Setting to true will try to extract/unwrap the children of disallowed nodes. For instance, 
     * if disallowing Strong, the default behaviour is to simply skip the text within the strong 
     * altogether, while the behaviour some might want is to simply have the text returned without 
     * the strong wrapping it. (default: false)
     */
    public unwrapDisallowed?: boolean;

    /**
     * Function execute if in order to determine if the node should be allowed. Ran prior to checking allowedTypes/disallowedTypes. 
     * Returning a truthy value will allow the node to be included. Note that if this function returns true and 
     * the type is not in allowedTypes (or specified as a disallowedType), it won't be included. The function will receive three arguments argument
     * (node, index, parent), where node contains different properties depending on the node type.
     */
    public allowNode?: (node: MarkdownAbstractSyntaxTree, index: number, parent: ReactMarkdownType) => boolean;

    /**
     * Sets the default target attribute for links. If a function is provided, it will be called with url, text, and title and 
     * should return a string (e.g. _blank for a new tab). Default is undefined (no target attribute).
     */
    public linkTarget?: string | (uri: string, text: string, title: string=) => string;

    /**
     * Function that gets called for each encountered link with a single argument - uri. The returned value is used in place of the original. 
     * The default link URI transformer acts as an XSS-filter, neutralizing things like javascript:, vbscript: and file: protocols. 
     * If you specify a custom function, this default filter won't be called, but you can access it as require('react-markdown').uriTransformer. 
     * If you want to disable the default transformer, pass null to this option.
     */
    public transformLinkUri?: (uri: string, children: (string | React.ReactElement<?> | Iterable<string | React.ReactElement<?>> | Function)=, title: string=) => string;

    /**
     * Function that gets called for each encountered image with a single argument - uri. The returned value is used in place of the original.
     */
    public transformImageUri?: (uri: string, children: (string | React.ReactElement<?> | Iterable<string | React.ReactElement<?>> | Function)=, title: string=, alt: string=) => string;

    /**
     * An object where the keys represent the node type and the value is a React component. The object 
     * is merged with the default renderers. The props passed to the component varies based on the type 
     * of node. See the type renderer options of commonmark-react-renderer 
     * (https://github.com/rexxars/commonmark-react-renderer#type-renderer-options) for more details.
     */
    public renderers?: Object;
    
    /**
     * An array of unified/remark parser plugins. If you need to pass options to the plugin, pass an array with two elements, 
     * the first being the plugin and the second being the options - 
     * for instance: {plugins: [[require('remark-shortcodes'), {your: 'options'}]]. (default: [])
     */
    public plugins?: any[] | (() => void);

    /**
     * An object containing options to pass to remark-parse.
     */
    public parserOptions?: RemarkParseOptions;
}

external interface Point {
    public line: number;
    public column: number;
    public offset?: number;
}

external interface Position {
    public start: Point;
    public end: Point;
    public indent?: number[];
}

external interface RemarkParseOptions {
    public gfm?: boolean;
    public commonmark?: boolean;
    public footnotes?: boolean;
    public blocks?: string[];
    public pedantic?: boolean;
}

external interface MarkdownAbstractSyntaxTree {
    public align?: string; // "left" | "right" | "center"
    public alt?: string;
    public checked?: boolean;
    public children?: MarkdownAbstractSyntaxTree[];
    public data?: Object;
    public index?: number;
    public depth?: number;
    public height?: number;
    public identifier?: string;
    public lang?: string;
    public loose?: boolean;
    public ordered?: boolean;
    public position?: Position;
    public referenceType?: string; // "shortcut" | "collapsed" | "full"
    public start?: number;
    public title?: string;
    public type: string;
    public url?: string;
    public value?: string;
    public width?: number;
}


/**
 * Render Markdown as React components
 * https://github.com/rexxars/react-markdown
 * http://rexxars.github.io/react-markdown/
 */
export default external public class ReactMarkdown extends React.Component<ReactMarkdownProps, undefined, any> {
    @Override
    public render(): React.ReactElement<?>;
};

/* -*- mode: typescript;-*- */
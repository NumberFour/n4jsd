import * as React from "react";

@StringBased
export external public enum CarouselScrollMode {
    page,
    remainder
}

@StringBased
export external public enum CarouselCellAlignment {
    left,
    center,
    right
}

@StringBased
export external public enum CarouselHeightMode {
    first,
    current,
    max
}

@StringBased
export external public enum CarouselTransitionMode {
    fade,
    scroll,
    scroll3d
}

@StringBased
export external public enum CarouselSlidesToScroll {
    auto
}

@StringBased
export external public enum CarouselAnimationEffect {
    zoom
}

@StringBased
export external public enum CarouselControlContainer {
    TopLeft,
    TopCenter,
    TopRight,
    CenterLeft,
    CenterCenter,
    CenterRight,
    BottomLeft,
    BottomCenter,
    BottomRight
}

export external public interface ~CarouselSlideActions {
    public nextSlide?: int[];
    public previousSlide?: int[];
    public firstSlide?: int[];
    public lastSlide?: int[];
    public pause?: int[];
}

export external public interface ~DefaultControlsConfig {
    public containerClassName?: string;
    public nextButtonClassName?: string;
    public nextButtonStyle?: Object;
    public nextButtonText?: string;
    public prevButtonClassName?: string;
    public prevButtonStyle?: Object;
    public prevButtonText?: string;
    public pagingDotsContainerClassName?: string;
    public pagingDotsClassName?: string;
    public pagingDotsStyle?: Object;
}

export external public interface ~CarouselSlideRenderControlProps {
    /**
     * When displaying more than one slide, sets which position to anchor the current slide to.
     */
    public cellAlign: CarouselCellAlignment;

    /**
     * When displaying more than one slide, sets which position to anchor the current slide to.
     */
    public cellSpacing: number;

    /**
     * Current slide index
     */
    public currentSlide: int;

    /**
     * Current frame width (px)
     */
    public frameWidth: number;

    /**
     * Go to X slide method
     * @param index Slide's index to go
     */
    public goToSlide: (index: int) => void;

    /**
     * Go to the next slide method
     */
    public nextSlide: () => void;

    /**
     * Go to the previous slide method
     */
    public previousSlide: () => void;

    /**
     * Total amount of slides
     */
    public slideCount: int;

    /**
     * Slides to scroll at once
     */
    public slidesToScroll: int | CarouselSlidesToScroll;

    /**
     * Slides to show at once
     */
    public slidesToShow: int;

    /**
     * Current slide width (px)
     */
    public slideWidth: number;

    /**
     * Infinite mode enabled
     */
    public wrapAround: boolean;
}

export external public type CarouselRenderControlFn = (props: CarouselSlideRenderControlProps) => React.ReactElement<?> | constructor{React.Component};

export external public interface ~CarouselProps extends React.ComponentProps<any> {
    /**
     * Hook to be called after a slide is changed
     * @param index Index of the current slide
     */
    public afterSlide?: (index: int) => void;

    /**
     * Adds a zoom effect on the currently visible slide.
     */
    public animation?: CarouselAnimationEffect;

    /**
     * Will generate a style tag to help ensure images are displayed properly
     * @default true
     */
    public autoGenerateStyleTag?: boolean;

    /**
     * Autoplay mode active
     * @default false
     */
    public autoplay?: boolean;
        
    /**
     * Interval for autoplay iteration (ms)
     * @default 3000
     */
    public autoplayInterval?: number;

    /**
     * Autoplay cycles through slide indexes in reverse
     * @default false
     */
    public autoplayReverse?: boolean;

    /**
     * Hook to be called before a slide is changed
     * @param currentSlide Index of the current slide
     * @param endSlide Index of the last slide
     */
    public beforeSlide?: (currentSlide: int, endSlide: int) => void;
    
    /**
     * When displaying more than one slide, sets which position to anchor the current slide to.
     */
    public cellAlign?: CarouselCellAlignment;
    
    /**
     * Space between slides, as an integer, but reflected as px
     */
    public cellSpacing?: int;
    
    /**
     * Additional className
     */
    public className?: string;

    /**
     * When set to true, disable keyboard controls
     * @default false
     */
    public enableKeyboardControls?: boolean;

    /**
     * When enableKeyboardControls is enabled, Configure keyCodes for corresponding slide actions as array of keyCodes
     */
    public keyCodeConfig?: CarouselSlideActions;

    /**
     * Optional callback to apply styles to the container of a control.
     */
    public getControlsContainerStyles?: (key: CarouselControlContainer) => Object // CSSProperties

    /**
     * This prop lets you apply custom classes and styles to the default Next, Previous, and Paging Dots controls
     */
    public defaultControlsConfig?: DefaultControlsConfig;

    /**
     * Disable slides animation
     * @default false
     */
    public disableAnimation?: boolean;

    /**
     * Disable swipe before first slide and after last slide
     * @default false
     */
    public disableEdgeSwiping?: boolean;

    /**
     * Enable mouse swipe/dragging
     */
    public dragging?: boolean;

    /**
     * Animation easing function
     * @see https://github.com/d3/d3-ease
     */
    public easing?: string;

    /**
     * Animation easing function when swipe exceeds edge
     * @see https://github.com/d3/d3-ease
     */
    public edgeEasing?: string;

    /**
     * Used to set overflow style property on slider frame
     * @default 'hidden'
     */
    public frameOverflow?: string;

    /**
     * Used to set the margin of the slider frame.
     * Accepts any string dimension value such as "0px 20px" or "500px"
     * @example '0px 20px'
     * @example '500px'
     */
    public framePadding?: string;

    /**
     * Used to hardcode the slider height
     * @example '80%'
     * @example '500px'
     */
    public height?: string;

    /**
     * Change the height of the slides based either on the first slide,
     * the current slide, or the maximum height of all slides.
     */
    public innerRef?: React.RefObject<HTMLInputElement>;

    /**
     * Change the height of the slides based either on the first slide,
     * the current slide, or the maximum height of all slides.
     */
    public heightMode?: CarouselHeightMode;

    /**
     * Initial height of the slides (px)
     */
    public initialSlideHeight?: number;

    /**
     * Initial width of the slides (px)
     */
    public initialSlideWidth?: number;

    /**
     * optional callback function
     */
    public onDragStart?: () => void;

    /**
     * Window onResize callback
     */
    public onResize?: () => void;

    /**
     * Pause autoPlay when mouse is over carousel
     * @default true
     */
    public pauseOnHover?: boolean;

    /**
     * Function for rendering top left control
     */
    public renderTopLeftControls?: CarouselRenderControlFn;

    /**
     * Function for rendering top center control
     */
    public renderTopCenterControls?: CarouselRenderControlFn;

    /**
     * Function for rendering top right control
     */
    public renderTopRightControls?: CarouselRenderControlFn;

    /**
     * Function for rendering center left control
     */
    public renderCenterLeftControls?: CarouselRenderControlFn;

    /**
     * Function for rendering center center control
     */
    public renderCenterCenterControls?: CarouselRenderControlFn;

    /**
     * Function for rendering center right control
     */
    public renderCenterRightControls?: CarouselRenderControlFn;

    /**
     * Function for rendering bottom left control
     */
    public renderBottomLeftControls?: CarouselRenderControlFn;

    /**
     * Function for rendering bottom center control
     */
    public renderBottomCenterControls?: CarouselRenderControlFn;

    /**
     * Function for rendering bottom right control
     */
    public renderBottomRightControls?: CarouselRenderControlFn;

    /**
     * Function for rendering aria-live announcement messages
     */
    public renderAnnounceSlideMessage?: (currentSlide: int, slideCount: int) => string;

    /**
     * Supports 'page' and 'remainder' scroll modes.
     * Defaults to 'remainder'.
     */
    public scrollMode?: CarouselScrollMode;

    /**
     * Manually set the index of the slide to be shown
     */
    public slideIndex?: number;

    /**
     * While using prop animation = "zoom", you can
     * configure space around current slide with slideOffset.
     */
    public slideOffset?: number;

    /**
     * Slides to scroll at once. Set to "auto"
     * to always scroll the current number of visible slides
     */
    public slidesToScroll?: int | CarouselSlidesToScroll;

    /**
     * Slides to show at once
     */
    public slidesToShow?: int;

    /**
     * Manually set slideWidth
     * @example '20px'
     * @example 0.8
     */
    public slideWidth?: number | string;

    /**
     * Animation duration
     */
    public speed?: number;

    /**
     * style object
     */
    public style?: Object;

    /**
     * Enable touch swipe/dragging
     */
    public swiping?: boolean;

    /**
     * Set the way slides transition from one to the next
     */
    public transitionMode?: CarouselTransitionMode;

    /**
     * Enable the slides to transition vertically
     */
    public vertical?: boolean;

    /**
     * Used to hardcode the slider width
     * @example '80%'
     * @example '500px'
     */
    public width?: string;

    /**
     * Sets infinite wrapAround mode
     * @default false
     */
    public wrapAround?: boolean;

    /**
     * Used to remove all controls at once. Overwrites the render[Top, Right, Bottom, Left]CenterControls()
     * @default false
     */
    public withoutControls?: boolean;

    /**
     * Adds a number value to set the scale of zoom when animation === "zoom". 
     * The number value should be set in a range of (0,1). 
     * @default 0.85
     */
    public zoomScale?: number;
}

export external public interface ~CarouselState {
    /**
     * Current slide index
     */
    public currentSlide: int;

    /**
     * Is dragging enabled
     */
    public dragging: boolean;

    /**
     * Easing function name
     */
    public easing: string;

    /**
     * Current frame width
     */
    public frameWidth: number;

    public isWrappingAround: boolean;

    /**
     * Current left value
     */
    public left: number;

    public pauseOnHover: boolean;

    public resetWrapAroundPosition: boolean;

    /**
     * Total amount of slides
     */
    public slideCount: int;

    /**
     * Slides to scroll at once
     */
    public slidesToScroll: int | CarouselSlidesToScroll;

    /**
     * Current slide width
     */
    public slideWidth: number | string;

    /**
     * Current top value
     */
    public top: number;

    /**
     * Is infinite mode enabled
     */
    public wrapToIndex: boolean;
}

export external public interface ~PreviousButtonProps extends React.ComponentProps<any>, CarouselSlideRenderControlProps {}
export external public class PreviousButton extends React.Component<PreviousButtonProps, undefined, any> {
    @Override
    public render(): React.ReactElement<?>;
}

export external public interface ~NextButtonProps extends React.ComponentProps<any>, CarouselSlideRenderControlProps {}
export external public class NextButton extends React.Component<NextButtonProps, undefined, any> {
    @Override
    public render(): React.ReactElement<?>;
}

export external public interface ~PagingDotsProps extends React.ComponentProps<any>, CarouselSlideRenderControlProps {}
export external public class PagingDots extends React.Component<PagingDotsProps, undefined, any> {
    public getButtonStyles(active: boolean): Object;
    public getListStyles(): Object;
    public getDotIndexes(
        slideCount: int,
        slidesToScroll: int | CarouselSlidesToScroll,
        slidesToShow: int,
        cellAlign: CarouselCellAlignment
    ): int[];

    @Override
    public render(): React.ReactElement<?>;
}

/**
 * https://github.com/FormidableLabs/-carousel
 */
export default external public class Carousel extends React.Component<CarouselProps, CarouselState, any> {
    /**
     * @internal
     */
    public setDimensions: () => void;
    public startAutoplay: () => void;
    public stopAutoplay: () => void;
    public goToSlide: (index: int) => void;
    public nextSlide: () => void;
    public previousSlide: () => void;

    @Override
    public render(): React.ReactElement<?>;
};

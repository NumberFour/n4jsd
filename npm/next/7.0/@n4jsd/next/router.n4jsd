import * as React from "react";

/**
 * Passed into page props.
 */
export external public class TransitionOptions {
    public shallow?: boolean;
}

export external public interface ~NextRouter {
    /**
     * String of the current route.
     */
    public get route(): string;
    /**
     * String of the current path excluding the query string.
     */
    public get pathname(): string;
    /**
     * Object with the parsed query string. Defaults to {}
     */
    public get query(): Object+;
    /**
     * performs a pushState call associated with the current component
     */
    public push(url, as: string=, options: ~TransitionOptions=): void;
    /**
     * performs a replaceState call associated with the current component
     */
    public replace(url: string, as: string=, options: ~TransitionOptions=): void;

    public async prefetch(url: string);

    /**
     * Fires when a route starts to change.
     */
    public routeChangeStart: (url: string) => void;
    /**
     * Fires when a route changed completely.
     */
    public routeChangeComplete: (url: string) => void;
    /**
     * Fires when there's an error when changing routes.
     */
    public routeChangeError: (err: ~Error with { cancelled: boolean; }, url: string) => void;
    /**
     * Fires just before changing the browser's history
     */
    public beforeHistoryChange: (url: string) => void;
    /**
     * Fires when switching pages and there's a new version of the app}.
     */
    public appUpdated: (nextRoute: string) => void;
}

export external public function useRouter(): NextRouter;

export external public function <CompT extends React.Component<PropsT, ?, ?>, PropsT extends React.ComponentProps<any>>
withRouter(ctor: constructor{CompT} | (PropsT) => React.ReactElement<?>): (PropsT) => React.ReactElement<?>;

/**
 * https://github.com/zeit/next.js#imperatively
 */
export default external public const Router: NextRouter;

/* -*- mode: typescript;-*- */

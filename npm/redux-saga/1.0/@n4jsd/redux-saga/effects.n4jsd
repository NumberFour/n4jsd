import {Action} from "redux";
import {ReduxSagaTask} from "index";

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#effect-creators
 */

/**
 * https://redux-saga.github.io/redux-saga/docs/api/
 * 
 * The saga generator yield type is one/more instruction object(s) processed by the middleware.
 */

 @StringBased
 export external public enum effectTypes {
     CALL,
     PUT,
     TAKE,
     FORK
     // ...
 }
 
 /**
  * Instruction yielded to the middleware (e.g. via put(), call()).
  */
 export external public interface ~Effect {
     public get type(): effectTypes;
 }

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#throttlems-pattern-saga-args
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 */
export external public function throttle(
    ms: int,
    pattern: union{Array<string>, string, {function(string): boolean}},
    workerSaga: {function(Action): Generator<union{Effect, Array<Effect>}, undefined, any>},
    ...args
): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#delayms-val
 */
export external public function <ValT> delay(ms: int, val: ValT=): Promise<ValT, any>;

/**
 * https://redux-saga.js.org/docs/api/#putaction
 */
export external public function put(action: Action): Effect;

/**
 * https://redux-saga.js.org/docs/api/#putresolveaction
 */
export external public function putResolve(action: Action): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#callfn-args
 */
export external public function call(fn: Function, ...args): Effect;

/**
 * Creates an Effect description that instructs the middleware to invoke fn as a Node style function.
 * 
 * https://redux-saga.github.io/redux-saga/docs/api/
 */
export external public function cps(fn: Function, ...args): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#takepattern
 * 
 * "*" for all
 * 
 * The middleware provides a special action END. If you dispatch the END action, then all Sagas blocked
 * on a take Effect will be terminated regardless of the specified pattern.
 * If the terminated Saga has still some forked tasks which are still running,
 * it will wait for all the child tasks to terminate before terminating the Task.
 */
export external public function take(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean
): Effect;

/**
 * https://redux-saga.js.org/docs/api/#takemaybepattern
 */
export external public function takeMaybe(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean
): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#takeeverypattern-saga-args
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 * 
 * @param workerSaga generator function thast takes all var args and the action
 */
export external public function takeEvery(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean,
    workerSaga: Function, //{function(/*puts the args in front of action ...args, Action */): Generator<union{Effect, Array<Effect>}, undefined, any>},
    ...args
): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#takelatestpattern-saga-args
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 * 
 * @param workerSaga generator function thast takes all var args and the action
 */
export external public function takeLatest(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean,
    workerSaga: Function, //{function(/*puts the args in front of action ...args, Action */): Generator<union{Effect, Array<Effect>}, undefined, any>},
    ...args
): Effect;

/**
 * https://redux-saga.js.org/docs/api/#takeleadingpattern-saga-args
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 * 
 * @param workerSaga generator function thast takes all var args and the action
 */
export external public function takeLeading(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean,
    workerSaga: Function, //{function(/*puts the args in front of action ...args, Action */): Generator<union{Effect, Array<Effect>}, undefined, any>},
    ...args
): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#takempattern
 * 
 * Same as take(pattern) but does not automatically terminate the Saga on an END action.
 * 
 * Effect resolves into an action object.
 */
export external public function takem(
    pattern: Array<string> | Array<string | (Action) => boolean> | string | (Action) => boolean
): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#forkfn-args
 * 
 * Attached task.
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 * 
 * @param fn generator function thast takes all var args
 */
export external public function fork(fn: Function, ...args): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#spawnfn-args
 * 
 * Detached task.
 * 
 * Effect resolves into a `ReduxSagaTask<?>`.
 * 
 * @param fn generator function thast takes all var args
 */
export external public function spawn(fn: Function, ...args): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#jointask
 * 
 * Creates an Effect description that instructs the middleware to wait for the result of a previously forked task.
 */
export external public function join(task: ReduxSagaTask<?>): Effect;

/**
 * Cancels the provided task/tasks. If no argument is provided, 
 * then it is used for self-cancellation.
 * Keep in mind that the cancel effect by itself is fork'ed, i.e.
 * the `cancel` effect won't wait for the cancelation to complete.
 * 
 * https://redux-saga.github.io/redux-saga/docs/api/#canceltask
 * cancel(task): Creates an Effect description that instructs the middleware to cancel a previously forked task.
 * 
 * https://redux-saga.github.io/redux-saga/docs/api/#canceltasks
 * cancel(...tasks): Creates an Effect description that instructs the middleware to cancel previously forked tasks.
 * 
 * https://redux-saga.github.io/redux-saga/docs/api/#cancel
 * cancel(): Creates an Effect description that instructs the middleware to cancel a task in which it has been yielded (self cancellation).
 */
export external public function cancel(...tasks: ReduxSagaTask<?>): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#cancelled
 * 
 * Use in `finally` block to check whether task has been cancelled.
 * 
 * Effect resolves into a boolean.
 */
export external public function cancelled(): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#raceeffects
 * 
 * Resolves the first winner, all other are cancelled.
 * 
 * Effect resolves into a plain Object of same shape as the `effectsMap`.
 */
export external public function race(effectsMap: Object): Effect;

/**
 * https://redux-saga.js.org/docs/api/#alleffects
 * 
 * Creates an Effect description that instructs the middleware to run multiple Effects in parallel and wait for all of them to complete.
 * 
 * Effect resolves into same shape as `effects`.
 */
export external public function all(effects: Object|Array<?>): Effect;

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#selectselector-args
 * 
 * Selects on the current store state.
 * 
 * Effect resolves into what's been selected.
 */
export external public function <StoreStateT> select(selector: {function(StoreStateT, Array<any> =)}=, ...args): Effect;

/* -*- mode: typescript;-*- */
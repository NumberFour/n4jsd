import {DateTimeFormatOptions} from "IntlClasses";
import {NumberFormatOptions} from "IntlClasses";
import * as React from "react";

/**
 * https://github.com/yahoo/react-intl/wiki/API#message-descriptor
 */
export external public interface ~__MessageDescriptor {
    /**
     * A unique, stable identifier for the message.
     */
    public id: string;
    /**
     * The default message (probably in English).
     */
    public defaultMessage?: string;
    /**
     * Context for the translator about how it's used in the UI.
     */
    public description?: string | Object;
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat
 * without localeMatcher
 */
export external public interface ~FormatRelativeTimeOptions {
    /**
     * 'always' (default), 'auto'
     */
    public numeric?: string;

    /**
     * 'long' (default), 'short', 'narrow'
     */
    public style?: string;
}


/**
 * The imperative formatting API.
 * 
 * https://github.com/yahoo/react-intl/wiki/API#intlshape
 */
export external public interface ~__IntlFormat {
    public formatDate: (value: any, options: DateTimeFormatOptions=) => string;
    public formatTime: (value: any, options: DateTimeFormatOptions=) => string;
    /**
     * second, seconds, minute, minutes, hour, hours, day, days, week, weeks, month, months, quarter, quarters, year, years
     */
    public formatRelativeTime: (value: number, unit: string=, opts: FormatRelativeTimeOptions=) => string;
    public formatNumber: (value: any, options: NumberFormatOptions=) => string;
    public formatMessage: (messageDescriptor: __MessageDescriptor, values: Object=) => string;
}

/**
 * https://github.com/yahoo/react-intl/wiki/API#injectintl
 */
export external public function <PropsT extends React.ComponentProps, CompT extends React.Component<PropsT, ?, ?>>
injectIntl(comp: (PropsT) => React.Element<?> | constructor{CompT}, options: ~Object with {
        intlPropName?: string,  // defaults to 'intl'
        forwardRef?: boolean    // defaults to false
    }=): (PropsT) => React.Element<?>;

/**
 * The intl metadata passed as props into the parent <IntlProvider>.
 * 
 * https://github.com/yahoo/react-intl/wiki/API#intlshape
 */
export external public interface ~IntlConfig {
    public locale?: string;
    public formats?: Object;
    /**
     * Format: {[id: string]: string}
     */
    public messages?: Object;
    /**
     * Defaults to 'span'
     */
    public textComponent?: any;
    /**
     * Defaults to 'en'
     */
    public defaultLocale?: string;
    public defaultFormats?: Object;
}

/**
 * https://github.com/yahoo/react-intl/wiki/API#intlshape
 */
export external public interface ~IntlShape extends IntlConfig, __IntlFormat {
    /**
     * A function that returns the current time.
     */
    public now?: () => number;
}

export external public interface ~IntlProviderContext {
    public intl?: IntlShape;
}

export external public interface ~IntlProviderProps extends React.ComponentProps, IntlProviderContext, IntlConfig {
    public initialNow?: any;
}

export external public interface ~IntlProviderState {
    public formatters?: Object;
    public now: () => number;
}

/**
 * https://github.com/yahoo/react-intl/wiki/Components#intlprovider
 */
export external public class IntlProvider extends React.Component<IntlProviderProps, IntlProviderState, any> {

    public getConfig(): IntlConfig;

    public getBoundFormatFns(config: IntlConfig, state: IntlProviderState): Array<Function>

    public getChildContext(): IntlProviderContext;

    @Override
    public render(): React.Element<?>;
}

/**
 * https://github.com/yahoo/react-intl/wiki/Components#formatteddate
 */

export external public interface ~FormattedDateProps extends React.ComponentProps, DateTimeFormatOptions {
    public value: any;
    public format?: string;
}

export external class FormattedDate extends React.Component<FormattedDateProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

/**
 * https://github.com/yahoo/react-intl/wiki/Components#formattedtime
 */

export external public interface ~FormattedTimeProps extends React.ComponentProps, DateTimeFormatOptions {
    public value: any;
    public format?: string;
}

export external class FormattedTime extends React.Component<FormattedTimeProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

export external public interface ~FormattedRelativeTimeProps extends React.ComponentProps, FormatRelativeTimeOptions {
    public value?: number;
    public unit?: string;
    public format?: string;
    public updateIntervalInSeconds?: number;
}

export external class FormattedRelativeTime extends React.Component<FormattedRelativeTimeProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

/**
 * https://github.com/yahoo/react-intl/wiki/Components#formattednumber
 */
export external public interface ~FormattedNumberProps extends React.ComponentProps, NumberFormatOptions {
    public value: any;
    public format?: string;
}

export external class FormattedNumber extends React.Component<FormattedNumberProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

/**
 * https://github.com/yahoo/react-intl/wiki/Components#formattedmessage
 */
export external public interface ~FormattedMessageProps extends React.ComponentProps, __MessageDescriptor {
    /**
     * Values for the placeholders in the message.
     */
    public values?: Object;
    /**
     * Name of the tag to wrap the message into; defaults to 'span'.
     */
    public tagName?: string;
}

export external public class FormattedMessage extends React.Component<FormattedMessageProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

/**
 * https://github.com/formatjs/react-intl/wiki/Components#formattedplural
 */
export external public interface ~FormattedPluralProps extends React.ComponentProps, __MessageDescriptor {
    public style?: string;
    public value?: any;
    public other: React.Element<?>;
    public zero?: React.Element<?>;
    public one?: React.Element<?>;
    public two?: React.Element<?>;
    public few?: React.Element<?>;
    public many?: React.Element<?>;
    @Override
    public children?: (formattedPlural: React.Element<?>) => React.Element<?>
}

export external public class FormattedPlural extends React.Component<FormattedPluralProps, Object, any> {
    @Override
    public render(): React.Element<?>;
}

export external public interface ~RawIntlProviderProps extends React.ComponentProps {
    public get value(): IntlShape;
}

export external public function RawIntlProvider(props: RawIntlProviderProps): React.Element<?>;

export external public const intlShape;

export external public const IntlContext: React.Context<IntlShape>;

export external public function useIntl(): IntlShape;

/* -*- mode: typescript;-*- */
import {ReduxStore, ReduxAction} from "redux";
import * as React from "react";

export external public interface ~ProviderProps extends React.ComponentProps {
    public store: ReduxStore<?>;
    public context?: React.Context<?>;
}

export external public class Provider
    extends React.PureComponent<ProviderProps, Object> {

    @Override
    public render(): React.Element<ProviderProps>;
}

export external public class ~ConnectOptions {
    public get context?(): constructor{React.Context};
    public get pure?(): boolean; // @default true
    public get areStatesEqual?(nextState: Object, prevState: Object): boolean; // @default strictEqual
    public get areOwnPropsEqual?(nextOwnProps: Object, prevOwnProps: Object): boolean; // @default shallowEqual
    public get areStatePropsEqual?(nextStateProps: Object, prevStateProps: Object): boolean; // @default shallowEqual 
    public get areMergedPropsEqual?(nextMergedProps: Object, prevMergedProps: Object): boolean; // @default shallowEqual 
    public get forwardRef?(): boolean; // @default false    
}

export external public class ~ConnectAdvancedOptions {
    public get getDisplayName?(componentName: string): string; // @default name => 'ConnectAdvanced('+name+')'
    public get methodName?(): string; // @default connectAdvanced
    public get renderCountProp?(): string; // @default undefined
    public get shouldHandleStateChanges?(): boolean; // @default true
    public get forwardRef?(): boolean; // @default false   
    public get extras?(): Object+; // any extra options passed via connectOptions will be passed through to your selectorFactory in the factoryOptions argument
}

export external public function <PropsT extends React.ComponentProps>
    connect(
        mapStateToProps: Function=, //{function(state:any, ownProps: any?): Object},
        mapDispatchToProps: Function= | Object=, //{function(dispatch:Function, ownProps: any?): Object}?,
        mergeProps: Function=,
        options: ConnectOptions=
    ): (constructor{?} | (PropsT) => React.Element<?>) => (PropsT) => React.Element<?>;

/**
 * @see https://react-redux.js.org/api/connect-advanced
 */
export external public function <PropsT extends React.ComponentProps>
    connectAdvanced(
        selectorFactory: Function,
        connectOptions?: ConnectAdvancedOptions=
    ): (constructor{?} | (PropsT) => React.Element<?>) => (PropsT) => React.Element<?>;

/**
 * @see https://react-redux.js.org/api/batch
 */
export external public function batch(cb: () => void): void;

/**
 * @see https://react-redux.js.org/api/hooks#useselector
 */
export external public function useSelector<TState, TSelected>(
    selector: (state: TState) => TSelected,
    equalityFn?: (left: TSelected, right: TSelected) => boolean
): TSelected;

/**
 * @see https://react-redux.js.org/api/hooks#usedispatch
 */
export external public function useDispatch(): ReduxAction;

/**
 * @see https://react-redux.js.org/api/hooks#usestore
 */
export external public function useStore(): ReduxStore<?>;

/* -*- mode: typescript;-*- */
import {Server , IncomingMessage , ServerResponse } from "http";

interface ~CookieOptions {
    maxAge: number?;
    signed: boolean?;
    expires: Date?;
    httpOnly: boolean?;
    path: string?;
    domain: string?;
    secure: boolean?;
}

export external public class ~Application extends Server implements IRouter{
    public locals: Object;
    public mountpath: string;
    public init(): void;
    public defaultConfiguration(): void;
    public engine(ext: string, fn: Function): this;
    public set(setting: string, val: any): this;
    @Override public all(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public get(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public post(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public put(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public delete(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public head(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public options(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public trace(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    @Override public connect(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public path(): string;
    public enabled(setting: string): boolean;
    public disabled(setting: string): boolean;
    public enable(setting: string): this;
    public disable(setting: string): this;

    @Promisifiable
    public render(name: string, options: Object, callback: {function(err: Error, html: string):void}): void;
    @Override public route(path: string): Route;
    @Override public use(path: string, ...func: {function(req: Request, res: Response, next: {function()})}): this
}
export external public class ~Request extends IncomingMessage{
    public get (name: string): string;
    public header(name: string): string;
    public accepts(type: union{string, Array<string>}): string;
    public acceptsCharset(charset: string): boolean;
    public acceptsLanguage(lang: string): boolean;
    public range(size: number): Array<any>;
    public acceptedLanguages: Array<string>;
    public acceptedCharsets: Array<string>;
    public param(name: string, defaultValue: any?): string;
    public is(type: string): boolean;
    public protocol: string;
    public secure: boolean;
    public ip: string;
    public ips: Array<string>;
    public subdomains: Array<string>;
    public path: string;
    public hostname: string;
    public fresh: boolean;
    public stale: boolean;
    public xhr: boolean;
    public body: any;
    public cookies: any;
    public params: any;
    public query: any;
    public route: any;
    public signedCookies: any;
    public originalUrl: string;
    public baseUrl: string;
    public app: Application;
}
export external public class ~Response extends ServerResponse {
    public status(code: number): this;
    public sendStatus(code: number): this;
    public links(links: any): this;
    public send( body: union{Buffer, Object, Array<any>, string, number}, reason: string?): this
    public json(body: any): this;
    public jsonp(body: any): this;

    @Promisifiable
    public sendFile(path: string, options: any?, errBack: {function(err: Error)}?): void;

    @Promisifiable
    public download(path: string, filename: union{string, {function(err: Error)}}?, errBack: {function(err: Error)}?): void;

    public contentType(type: string): this;
    public type(type: string): this;
    public format(obj: any): this;
    public attachment(filename: string?): this;
    public set(field: any, value: string?): this;
    public header(field: any, value: string?): this;
    public headersSent: boolean;
    public get (field: string): string;
    public clearCookie(name: string, options: any?): this;
    public cookie(name: string, val: any, options: CookieOptions?): this;
    public location(url: string): this;
    public redirect(status: number, url: string): void;

    @Promisifiable
    public render(view: string, options: Object?, callback: {function(err: Error, html: string)}?): void;

    public app: Application;
}
export external public interface ~IRouter {
    public all(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public get(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public post(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public put(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public delete(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public head(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public options(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public trace(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public connect(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public route(path: string): Route;
    public use(path: string, ...func: {function(req: Request, res: Response, next: {function()})}): this

}
export external public class Route {
    public constructor(path: string);
    public path: string;
    public stack: any;
    public all(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public get(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public post(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public put(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public delete(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public head(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public options(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public trace(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
    public connect(name: union{string, RegExp}, ...handlers: {function(req: Request, res: Response, next: Function)}): this;
}

export external public const application: Application;
export external public const request: Request;
export external public const response: Response;

export external public function Router(options: any?): IRouter;

export external public function query(options: any?): {function(req: Request, res: Response, next: Function)};

export default external public class __default {
    (): Application;

    public static Router(options: any?): IRouter;
    public static Route(path: string): Route;

    public static static(path: string): {function(req: Request, res: Response, next: {function()})};
    public static query(options: any?): {function(req: Request, res: Response, next: Function)};

    public const application: Application;
    public const request: Request;
    public const response: Response;
}

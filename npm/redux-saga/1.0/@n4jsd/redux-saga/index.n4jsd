import { Action } from "redux";


/**
 * https://redux-saga.github.io/redux-saga/docs/api/#task
 * 
 * Background Task.
 */
export external public interface ~ReduxSagaTask<ResultT> {
    public isRunning(): boolean;
    public isCancelled(): boolean;
    public result(): ResultT;
    public error(): any;
    public toPromise(): Promise<ResultT, any>;
    public cancel(): void;
}

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#middlewarerunsaga-args
 * 
 * @param saga generator function thast takes all var args
 */
export external public interface ~ReduxSagaMiddleware {
    public run(
        saga: Function, // {function(): Generator<union{Effect, Array<Effect>}, undefined, any>},
        ...args
    ): ReduxSagaTask<?>;
}

/**
 * https://redux-saga.github.io/redux-saga/docs/api/#createsagamiddlewareoptions
 * 
 * options.logger
 * options.sagaMonitor
 * options.onError
 */
export default external public function sagaMiddlewareFactory(options: Object=): ReduxSagaMiddleware;

/**
 * Special store action on END.
 */
export external public const END: Action;

/**
 * Special function property to attach a cancelation handler on a promise.
 * 
 * @see https://redux-saga.js.org/docs/api#canceltask
 */
export external public const CANCEL: string;

/* -*- mode: typescript;-*- */
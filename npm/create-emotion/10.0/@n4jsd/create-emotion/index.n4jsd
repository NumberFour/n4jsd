export external public interface ~Options {
    nonce?: string;
    key: string;
    container: HTMLElement;
    speedy?: boolean;
}

@EcmaScript
export external public class StyleSheet {
    public constructor(options: Options=);

    public isSpeedy: boolean;
    public ctr: number;
    public tags: HTMLElement+[];
    public container: HTMLElement;
    public maxLength: number;
    public key: string;
    public nonce?: string;
    public before?: Element;
    public insert(rule: string): void;
    public flush(): void;
}

export external public interface ~EmotionCache {
    public stylis(key: string, value: string): string[];
    public inserted: Object+;
    public registered: Object+;
    public sheet: StyleSheet;
    public key: string;
    public compat?: boolean;
    public nonce?: string;
}

export external public interface ~Emotion {
    /**
     * Accepts styles as a object, or array of objects and returns a class name.
     * 
     * @see https://emotion.sh/docs/emotion#global-styles
     */
    public css: (...args: any) => string;
    
    /**
     * Detects emotion generated class names ensuring styles are overwritten in the correct order.
     * 
     * @see https://emotion.sh/docs/emotion#cx
     */
    public cx: (...classNames: any) => string;
    
    /**
     * Injects styles into the global scope.
     * 
     * @see https://emotion.sh/docs/emotion#global-styles
     */
    public injectGlobal: (...args: any) => void;
    
    /**
     * Generates a unique animation name that can be used to animate elements with CSS animations.
     * 
     * @see https://emotion.sh/docs/emotion#animation-keyframes
     */
    public keyframes: (...args: any) => string;
    
    /**
     * @see https://emotion.sh/docs/ssr#hydrate
     */
    public hydrate: (ids: string[]) => void;

    public merge: (className: string) => string;

    public getRegisteredStyles: (registeredStyles: string[], className: string) => string;

    public flush: () => void;

    public sheet: StyleSheet;

    public cache: EmotionCache;
}

export default external public function createEmotion(options: Options=): Emotion;

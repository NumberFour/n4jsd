/**
 * lodash interface.
 *
 * http://lodash.com/docs
 */
export external public interface ~Lodash {

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     */
    public <T extends Function> once(func: T): T;
    
    /**
     * Adds all own enumerable function properties of a source object to the destination object.
     * If object is a function then methods are added to its prototype as well.
     */
    public mixin(dest: Object, source: Object, options: Object = undefined): Object;

    /**
     * Escapes a string literal to be used for RegExp ctors.
     */
    public escapeRegExp(str: string): string;

    /**
     * Converts first letter of the string to uppercase.
     */
    public capitalize(str: string): string;

    /**
     * Converts string to kebab case (a.k.a. spinal case). See Wikipedia for more details.
     */
    public kebabCase(str: string): string;

    /**
     * Converts string to snake case. See Wikipedia for more details.
     */
    public snakeCase(str: string): string;

    public startsWith(str: string, start: string): boolean;

    public endsWith(str: string, start: string): boolean;

    /**
     * Pads string on the left side if itâ€™s shorter than length. Padding characters are truncated if they exceed length.
     */
    public padStart(str: string, length: int, chars: string = undefined): string;

    /**
     * Returns true if object is a Number (including NaN).
     */
    public isNumber(obj: any): boolean;

    /**
     * Returns true of object is a plain object (of Object.prototype).
     */
    public isPlainObject(obj: any): boolean;
    
    /**
     * Creates a shallow clone of object composed of the specified properties. Property names may be specified as individual arguments or as arrays of property names.
     * If a callback is provided it will be executed for each property of object picking the properties the callback returns truthy for.
     * The callback is bound to thisArg and invoked with three arguments; (value, key, object).
     */
    public pick(obj: Object, ... args: any): Object;

    /**
     * Creates an object composed of the inverted keys and values of object. If object contains duplicate values, subsequent values overwrite property assignments of previous values unless multiValue is true.
     */
    public invert(obj: Object, multiValue: boolean = undefined): Object;

    /**
     * Creates a function that will delay the execution of func until after wait milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that func should be invoked on the leading and/or trailing edge of the wait timeout.
     * Subsequent calls to the debounced function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of the timeout only if the the debounced function is invoked more than once during the wait timeout.
     */
    public debounce(fn: Function, wait: number, options: ~Object with {leading?: boolean; maxWait?: number; trailing?: boolean;} = undefined): Function;

    /**
     * Generates a unique ID. If prefix is provided the ID will be appended to it.
     */
    public uniqueId(prefix: string = undefined): string;

    /**
     * Fill in missing properties in <b>object</b> with default values from the <b>defaults</b> objects, and return the <b>object</b>.
     * As soon as the property is filled, further defaults will have no effect.
     */
    public defaults(object: Object, ... defaults: Object): Object;

    /**
     * Create a duplicate free version of the given array.
     */
    public <T> uniq(array: Array<T>): Array<T>;

    /**
     * Assigns own enumerable properties of source object(s) to the destination object. Subsequent sources overwrite property assignments of previous sources.
     */
    public assign(object: Object, ... sources: Object): Object;
    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     */
    public isEqual(value: any, other: any, cb: {function (value: any, other: any, indexOrKey: union{number, string} = undefined)} = undefined, thisArg: any = undefined): boolean;
    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     */
    public keysIn(object: Object): Array<string>;
    /**
     * Creates an array of function property names from all enumerable properties, own and inherited, of object.
     */
    public methods(object: Object): Array<string>;
    /**
     * Gets the index at which the first occurrence of value is found using strict equality for comparisons, i.e. ===. If the array is already sorted providing true for fromIndex will run a faster binary search.
     */
    public indexOf(object: Object, value: any, fromIndexOrBinarySearch: union{number, boolean} = undefined): int;

    public <ValueT> find(collection: union{Object, Array<?>, string}, callback: union{{function(ValueT, union{string, number}, union{Object, Array<ValueT>, string}): boolean}, Object, string} = undefined, context: Object = undefined): ValueT;

    /**
     * Maps an object's values.
     */
    public <ValueT> each(collection: Object, iterator: {function(ValueT, string, Object): void}, context: Object = undefined): void;

    public <ValueT> some(collection: union{Array<ValueT>, Object, string}, callback: {function(ValueT): boolean} = undefined, context: Object = undefined): boolean;

    public <ValueT> mapValues(obj: Object, iterator: {function(ValueT, string): any}): Object+;

    public <ElemT> toArray(ar: any): Array<ElemT>;

    public <ElemT> difference(array: Array<ElemT>, ... toBeExcluded: Array<ElemT>): Array<ElemT>;

    public <ElemT> without(array: Array<ElemT>, ... toBeExcluded: ElemT): Array<ElemT>;

    public <ElemT> values(obj: Object): Array<ElemT>;

    public <ElemT> findIndex(predicate: Array<ElemT>, callback: {function(ElemT, number, Array<ElemT>): boolean} = undefined, context: Object = undefined): int;

    public random(min: number = undefined, max: number = undefined, floating: boolean = undefined): number;

    public <ValueT> sample(collection: union{Array<ValueT>, Object, string}, n: number = undefined): ValueT;

    public times(n: number, callback: {function(i: number = undefined): void}, context: Object = undefined): void;

    public <ValueT> sortBy(collection: union{Array<ValueT>, Object, string}, iterator: union{{function(ValueT, number, Array<ValueT>): number}, {function(ValueT, string, Object): number}} = undefined, context: Object = undefined): void;
    
    /**
     * Creates a function to execute on a collection of objects (varying context)
     */
    public method(fn: Function, ... args: any): Function;

    /**
     * Clamps a value in [min, max] (both including).
     */
    public clamp(value: number, min: number, max: number): number;

    /**
     * Whether a value is inside a range [lower, upper).
     */
    public inRange(value: number, lower: number, upper: number): boolean;
}

export default external public const _: Lodash;

/* -*- mode: typescript;-*- */
